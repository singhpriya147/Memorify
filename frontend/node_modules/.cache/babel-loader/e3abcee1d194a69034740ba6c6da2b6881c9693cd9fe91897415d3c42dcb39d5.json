{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\n// async thunk function -that deal with async data backend\n\n// Get user which contain basic user data and a token  from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n//register user\n\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  //make a request\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// get   a user\nexport const getUser = createAsyncThunk('auth/getUser', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    // console.log(token);\n    const response = await fetch(`http://localhost:5000/api/users/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    //  console.log(data);\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n    // return message\n  }\n});\n\n// get all users available \n\nexport const getAllPerson = createAsyncThunk('auth/getAllPerson', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    // console.log(token);\n\n    const response = await fetch(`http://localhost:5000/api/users`, {\n      //  const response = await fetch(`process.env.BASE_URL/api/users`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer${token}`\n      }\n    });\n    const data = await response.json();\n    // console.log(data);\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const updateProfile = createAsyncThunk('auth/updateProfile', async (_ref, thunkAPI) => {\n  let {\n    name,\n    email,\n    location,\n    occupa\n  } = _ref;\n  //make a request\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    const response = await fetch(`http://localhost:5000/api/users/update/profile`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email\n      })\n    });\n    const data = await response.json();\n    // console.log(\"data after update\",data);\n    // console.log(token)\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n    // console.log(\" error in updating the profile \",error);\n  }\n});\n\nexport const updatePassword = createAsyncThunk('auth/updatePassword', async (_ref2, thunkAPI) => {\n  let {\n    oldPassword,\n    newPassword\n  } = _ref2;\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    const response = await fetch(`http://localhost:5000/api/users/update/password`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer${token}`\n      },\n      body: JSON.stringify({\n        oldPassword: oldPassword,\n        newPassword: newPassword\n      })\n    });\n    const data = await response.json();\n    console.log('Backend Response:', data);\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// logut user\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n});\n\n// make slice\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // pending\n    .addCase(register.pending, state => {\n      state.isLoading = true;\n    })\n\n    // fulfilled\n    .addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    })\n\n    //rejected\n    .addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    })\n    // case for logut\n    .addCase(logout.fulfilled, state => {\n      state.user = null;\n    })\n    // case for getting user\n    .addCase(getUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(getUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(getUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n\n    // .addCase(getAllPerson.pending, (state) => {\n    //   state.isLoading = true;\n    // })\n    // .addCase(getAllPerson.fulfilled, (state, action) => {\n    //   state.isLoading = false;\n    //   state.isSuccess = true;\n    //   state.user = action.payload;\n    // })\n    // .addCase(getAllPerson.rejected, (state, action) => {\n    //   state.isLoading = false;\n    //   state.isError = true;\n    //   state.message = action.payload;\n    // })\n    // pending\n    .addCase(updateProfile.pending, state => {\n      state.isLoading = true;\n    })\n\n    // fulfilled\n    .addCase(updateProfile.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user.name = action.payload.name;\n      state.user.email = action.payload.email;\n    })\n\n    //rejected\n    .addCase(updateProfile.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      // state.user = null;\n    }).addCase(updatePassword.pending, state => {\n      state.isLoading = true;\n    }).addCase(updatePassword.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n\n      // state.user.password = action.payload.newPassword;\n      // state.user.email = action.payload.email;\n    }).addCase(updatePassword.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      // state.user = null;\n    });\n  }\n});\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","getUser","id","token","getState","auth","fetch","method","headers","Authorization","json","getAllPerson","_","updateProfile","name","email","location","occupa","body","stringify","updatePassword","oldPassword","newPassword","console","log","logout","authSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["D:/memories-backup/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\n// async thunk function -that deal with async data backend\r\n\r\n// Get user which contain basic user data and a token  from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n//register user\r\n\r\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\r\n\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    //make a request\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response && error.response.data && error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\n// get   a user\r\nexport const getUser=createAsyncThunk('auth/getUser',async(id,thunkAPI)=>{\r\n  try {\r\n    const token = thunkAPI.getState().auth.user.token;\r\n    // console.log(token);\r\n     const response = await fetch(`http://localhost:5000/api/users/${id}`, {\r\n       method: 'GET',\r\n       headers: {\r\n         'Content-Type': 'application/json',\r\n         Authorization: `Bearer ${token}`,\r\n       },\r\n     });\r\n     const data=await response.json();\r\n    //  console.log(data);\r\n     return data;\r\n\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n    // return message\r\n  }\r\n})\r\n\r\n// get all users available \r\n\r\n   export const getAllPerson = createAsyncThunk ('auth/getAllPerson',async(_,thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token;\r\n      // console.log(token);\r\n\r\n\r\n\r\n      \r\n     const response = await fetch(`http://localhost:5000/api/users`, {\r\n       //  const response = await fetch(`process.env.BASE_URL/api/users`, {\r\n       method: 'GET',\r\n       headers: {\r\n         Authorization: `Bearer${token}`,\r\n       },\r\n     });\r\n      const data = await response.json();\r\n      // console.log(data);\r\n      return data;\r\n    } catch (error) {\r\n\r\n     const message =\r\n       (error.response && error.response.data && error.response.data.message) ||\r\n       error.message ||\r\n       error.toString();\r\n     return thunkAPI.rejectWithValue(message);\r\n    }\r\n  });\r\n\r\n\r\n\r\nexport const updateProfile = createAsyncThunk(\r\n  'auth/updateProfile',\r\n  async ({name,email,location,occupa},thunkAPI) => {\r\n    //make a request\r\n    try {\r\n      \r\n     const token = thunkAPI.getState().auth.user.token;\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/users/update/profile`,\r\n        {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ name: name, email: email }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      // console.log(\"data after update\",data);\r\n      // console.log(token)\r\n      return data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n      // console.log(\" error in updating the profile \",error);\r\n    }\r\n  }\r\n);\r\n\r\n\r\nexport const updatePassword=createAsyncThunk('auth/updatePassword',async({oldPassword,newPassword},thunkAPI)=>{\r\n  try {\r\n    const token=thunkAPI.getState().auth.user.token;\r\n    const response = await fetch(\r\n      `http://localhost:5000/api/users/update/password`,\r\n      {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          oldPassword: oldPassword,\r\n          newPassword: newPassword,\r\n        }),\r\n      }\r\n    );\r\n    const data=await response.json();\r\n     console.log('Backend Response:', data);\r\n     return data;\r\n\r\n\r\n\r\n  } catch (error) {\r\nconst message =\r\n  (error.response && error.response.data && error.response.data.message) ||\r\n  error.message ||\r\n  error.toString();\r\nreturn thunkAPI.rejectWithValue(message);\r\n\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// logut user\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  await authService.logout();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// make slice\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = '';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // pending\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      // fulfilled\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n\r\n      //rejected\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      // case for logut\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      })\r\n      // case for getting user\r\n\r\n      .addCase(getUser.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getUser.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(getUser.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n\r\n      // .addCase(getAllPerson.pending, (state) => {\r\n      //   state.isLoading = true;\r\n      // })\r\n      // .addCase(getAllPerson.fulfilled, (state, action) => {\r\n      //   state.isLoading = false;\r\n      //   state.isSuccess = true;\r\n      //   state.user = action.payload;\r\n      // })\r\n      // .addCase(getAllPerson.rejected, (state, action) => {\r\n      //   state.isLoading = false;\r\n      //   state.isError = true;\r\n      //   state.message = action.payload;\r\n      // })\r\n      // pending\r\n\r\n      .addCase(updateProfile.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      // fulfilled\r\n      .addCase(updateProfile.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user.name = action.payload.name;\r\n        state.user.email = action.payload.email;\r\n      })\r\n\r\n      //rejected\r\n      .addCase(updateProfile.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        // state.user = null;\r\n      })\r\n\r\n\r\n\r\n      .addCase(updatePassword.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      .addCase(updatePassword.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload\r\n\r\n        // state.user.password = action.payload.newPassword;\r\n        // state.user.email = action.payload.email;\r\n      })\r\n      .addCase(updatePassword.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        // state.user = null;\r\n      });\r\n\r\n  },\r\n});\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,eAAe;AACvC;;AAEA;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErD,MAAMC,YAAY,GAAG;EACnBL,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxBM,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;AACD;;AAEA;;AAEA,OAAO,MAAMC,QAAQ,GAAGZ,gBAAgB,CACtC,eAAe,EACf,OAAOE,IAAI,EAAEW,QAAQ,KAAK;EACxB;EACA,IAAI;IACF,OAAO,MAAMZ,WAAW,CAACW,QAAQ,CAACV,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IACrEG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;;AAED;AACA,OAAO,MAAMQ,KAAK,GAAGnB,gBAAgB,CAAC,YAAY,EAAE,OAAOE,IAAI,EAAEW,QAAQ,KAAK;EAC5E,IAAI;IACF,OAAO,MAAMZ,WAAW,CAACkB,KAAK,CAACjB,IAAI,CAAC;EACtC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IACrEG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;EAC1C;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMS,OAAO,GAACpB,gBAAgB,CAAC,cAAc,EAAC,OAAMqB,EAAE,EAACR,QAAQ,KAAG;EACvE,IAAI;IACF,MAAMS,KAAK,GAAGT,QAAQ,CAACU,QAAQ,EAAE,CAACC,IAAI,CAACtB,IAAI,CAACoB,KAAK;IACjD;IACC,MAAMP,QAAQ,GAAG,MAAMU,KAAK,CAAE,mCAAkCJ,EAAG,EAAC,EAAE;MACpEK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASN,KAAM;MACjC;IACF,CAAC,CAAC;IACF,MAAMN,IAAI,GAAC,MAAMD,QAAQ,CAACc,IAAI,EAAE;IACjC;IACC,OAAOb,IAAI;EAEd,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IACrEG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;;AAEG,OAAO,MAAMmB,YAAY,GAAG9B,gBAAgB,CAAE,mBAAmB,EAAC,OAAM+B,CAAC,EAAClB,QAAQ,KAAK;EACtF,IAAI;IACF,MAAMS,KAAK,GAAGT,QAAQ,CAACU,QAAQ,EAAE,CAACC,IAAI,CAACtB,IAAI,CAACoB,KAAK;IACjD;;IAKD,MAAMP,QAAQ,GAAG,MAAMU,KAAK,CAAE,iCAAgC,EAAE;MAC9D;MACAC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,SAAQN,KAAM;MAChC;IACF,CAAC,CAAC;IACD,MAAMN,IAAI,GAAG,MAAMD,QAAQ,CAACc,IAAI,EAAE;IAClC;IACA,OAAOb,IAAI;EACb,CAAC,CAAC,OAAOF,KAAK,EAAE;IAEf,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IACrEG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;EACzC;AACF,CAAC,CAAC;AAIJ,OAAO,MAAMqB,aAAa,GAAGhC,gBAAgB,CAC3C,oBAAoB,EACpB,aAAoCa,QAAQ,KAAK;EAAA,IAA1C;IAACoB,IAAI;IAACC,KAAK;IAACC,QAAQ;IAACC;EAAM,CAAC;EACjC;EACA,IAAI;IAEH,MAAMd,KAAK,GAAGT,QAAQ,CAACU,QAAQ,EAAE,CAACC,IAAI,CAACtB,IAAI,CAACoB,KAAK;IAChD,MAAMP,QAAQ,GAAG,MAAMU,KAAK,CACzB,gDAA+C,EAChD;MACEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASN,KAAM;MACjC,CAAC;MACDe,IAAI,EAAElC,IAAI,CAACmC,SAAS,CAAC;QAAEL,IAAI,EAAEA,IAAI;QAAEC,KAAK,EAAEA;MAAM,CAAC;IACnD,CAAC,CACF;IAED,MAAMlB,IAAI,GAAG,MAAMD,QAAQ,CAACc,IAAI,EAAE;IAClC;IACA;IACA,OAAOb,IAAI;EACb,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IACbD,KAAK,CAACC,QAAQ,CAACC,IAAI,IACnBF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;IACxC;EACF;AACF,CAAC,CACF;;AAGD,OAAO,MAAM4B,cAAc,GAACvC,gBAAgB,CAAC,qBAAqB,EAAC,cAAgCa,QAAQ,KAAG;EAAA,IAArC;IAAC2B,WAAW;IAACC;EAAW,CAAC;EAChG,IAAI;IACF,MAAMnB,KAAK,GAACT,QAAQ,CAACU,QAAQ,EAAE,CAACC,IAAI,CAACtB,IAAI,CAACoB,KAAK;IAC/C,MAAMP,QAAQ,GAAG,MAAMU,KAAK,CACzB,iDAAgD,EACjD;MACEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,SAAQN,KAAM;MAChC,CAAC;MACDe,IAAI,EAAElC,IAAI,CAACmC,SAAS,CAAC;QACnBE,WAAW,EAAEA,WAAW;QACxBC,WAAW,EAAEA;MACf,CAAC;IACH,CAAC,CACF;IACD,MAAMzB,IAAI,GAAC,MAAMD,QAAQ,CAACc,IAAI,EAAE;IAC/Ba,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE3B,IAAI,CAAC;IACtC,OAAOA,IAAI;EAId,CAAC,CAAC,OAAOF,KAAK,EAAE;IAClB,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IACrEG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;EAEtC;AACF,CAAC,CAAC;;AASF;AACA,OAAO,MAAMiC,MAAM,GAAG5C,gBAAgB,CAAC,aAAa,EAAE,YAAY;EAChE,MAAMC,WAAW,CAAC2C,MAAM,EAAE;AAC5B,CAAC,CAAC;;AASF;AACA,OAAO,MAAMC,SAAS,GAAG9C,WAAW,CAAC;EACnCkC,IAAI,EAAE,MAAM;EACZ1B,YAAY;EACZuC,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,KAAK;MACvBuC,KAAK,CAACxC,OAAO,GAAG,KAAK;MACrBwC,KAAK,CAACrC,OAAO,GAAG,EAAE;IACpB;EACF,CAAC;EACDsC,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACvC,QAAQ,CAACwC,OAAO,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAACtC,SAAS,GAAG,IAAI;IACxB,CAAC;;IAED;IAAA,CACCyC,OAAO,CAACvC,QAAQ,CAACyC,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,IAAI;MACtBuC,KAAK,CAAC9C,IAAI,GAAGoD,MAAM,CAACC,OAAO;IAC7B,CAAC;;IAED;IAAA,CACCJ,OAAO,CAACvC,QAAQ,CAAC4C,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC7CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACxC,OAAO,GAAG,IAAI;MACpBwC,KAAK,CAACrC,OAAO,GAAG2C,MAAM,CAACC,OAAO;MAC9BP,KAAK,CAAC9C,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC,CAEDiD,OAAO,CAAChC,KAAK,CAACiC,OAAO,EAAGJ,KAAK,IAAK;MACjCA,KAAK,CAACtC,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDyC,OAAO,CAAChC,KAAK,CAACkC,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC3CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,IAAI;MACtBuC,KAAK,CAAC9C,IAAI,GAAGoD,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAAChC,KAAK,CAACqC,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC1CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACxC,OAAO,GAAG,IAAI;MACpBwC,KAAK,CAACrC,OAAO,GAAG2C,MAAM,CAACC,OAAO;MAC9BP,KAAK,CAAC9C,IAAI,GAAG,IAAI;IACnB,CAAC;IACD;IAAA,CACCiD,OAAO,CAACP,MAAM,CAACS,SAAS,EAAGL,KAAK,IAAK;MACpCA,KAAK,CAAC9C,IAAI,GAAG,IAAI;IACnB,CAAC;IACD;IAAA,CAECiD,OAAO,CAAC/B,OAAO,CAACgC,OAAO,EAAGJ,KAAK,IAAK;MACnCA,KAAK,CAACtC,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDyC,OAAO,CAAC/B,OAAO,CAACiC,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC7CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,IAAI;MACtBuC,KAAK,CAAC9C,IAAI,GAAGoD,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAAC/B,OAAO,CAACoC,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC5CN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACxC,OAAO,GAAG,IAAI;MACpBwC,KAAK,CAACrC,OAAO,GAAG2C,MAAM,CAACC,OAAO;IAChC,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,CAECJ,OAAO,CAACnB,aAAa,CAACoB,OAAO,EAAGJ,KAAK,IAAK;MACzCA,KAAK,CAACtC,SAAS,GAAG,IAAI;IACxB,CAAC;;IAED;IAAA,CACCyC,OAAO,CAACnB,aAAa,CAACqB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,IAAI;MACtBuC,KAAK,CAAC9C,IAAI,CAAC+B,IAAI,GAAGqB,MAAM,CAACC,OAAO,CAACtB,IAAI;MACrCe,KAAK,CAAC9C,IAAI,CAACgC,KAAK,GAAGoB,MAAM,CAACC,OAAO,CAACrB,KAAK;IACzC,CAAC;;IAED;IAAA,CACCiB,OAAO,CAACnB,aAAa,CAACwB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAClDN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACxC,OAAO,GAAG,IAAI;MACpBwC,KAAK,CAACrC,OAAO,GAAG2C,MAAM,CAACC,OAAO;MAC9B;IACF,CAAC,CAAC,CAIDJ,OAAO,CAACZ,cAAc,CAACa,OAAO,EAAGJ,KAAK,IAAK;MAC1CA,KAAK,CAACtC,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CAEDyC,OAAO,CAACZ,cAAc,CAACc,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACpDN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACvC,SAAS,GAAG,IAAI;MACtBuC,KAAK,CAAC9C,IAAI,GAAGoD,MAAM,CAACC,OAAO;;MAE3B;MACA;IACF,CAAC,CAAC,CACDJ,OAAO,CAACZ,cAAc,CAACiB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACtC,SAAS,GAAG,KAAK;MACvBsC,KAAK,CAACxC,OAAO,GAAG,IAAI;MACpBwC,KAAK,CAACrC,OAAO,GAAG2C,MAAM,CAACC,OAAO;MAC9B;IACF,CAAC,CAAC;EAEN;AACF,CAAC,CAAC;;AACF,OAAO,MAAM;EAAER;AAAM,CAAC,GAAGF,SAAS,CAACY,OAAO;AAC1C,eAAeZ,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}