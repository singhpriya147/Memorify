{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport postService from './postService';\nconst initialState = {\n  posts: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false\n  // message:'',\n};\n\n// create new post\n\nexport const createPost = createAsyncThunk('posts/create', async (postData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await postService.createPost(postData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get user Feed posts basically all following user post \nexport const getFeedPosts = createAsyncThunk('posts/getFeedPosts', async thunkAPI => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await postService.getFeedPosts(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get post of  one user\n\n// export const getUserPosts = createAsyncThunk(\n//   'posts/getOnlyUserPosts',\n//   async (id, thunkAPI) => {\n//     try {\n//       const token = thunkAPI.getState().auth.user.token;\n//       return await postService.getUserPosts(id,token);\n//     } catch (error) {\n//       const message =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString();\n//       return thunkAPI.rejectWithValue(message);\n//     }\n//   }\n// );\n\n// Delete user post\nexport const deletePost = createAsyncThunk('post/delete', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await postService.deletePost(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts.push(action.payload);\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getFeedPosts.pending, state => {\n      state.isLoading = true;\n    }).addCase(getFeedPosts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts = action.payload;\n    }).addCase(getFeedPosts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n\n    // .addCase(getUserPosts.pending, (state) => {\n    //   state.isLoading = true;\n    // })\n    // .addCase(getUserPosts.fulfilled, (state, action) => {\n    //   state.isLoading = false;\n    //   state.isSuccess = true;\n    //   state.posts = action.payload;\n    // })\n    // .addCase(getUserPosts.rejected, (state, action) => {\n    //   state.isLoading = false;\n    //   state.isError = true;\n    //   state.message = action.payload;\n    // })\n    .addCase(deletePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts = state.posts.filter(post => post._id !== action.payload.id);\n    }).addCase(deletePost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postService","initialState","posts","isError","isSuccess","isLoading","createPost","postData","thunkAPI","token","getState","auth","user","error","message","response","data","toString","rejectWithValue","getFeedPosts","id","deletePost","postSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","filter","post","_id","actions","reducer"],"sources":["D:/memories/frontend/src/features/Posts/postSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport postService from './postService'\r\n\r\nconst initialState={\r\n posts:[],\r\n isError:false,\r\n isSuccess:false,\r\n isLoading:false,\r\n // message:'',\r\n}\r\n\r\n// create new post\r\n \r\nexport const createPost=createAsyncThunk('posts/create',async(postData,thunkAPI)=>{\r\n\r\n try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await postService.createPost(postData, token)\r\n      \r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n        }\r\n})\r\n\r\n// Get user Feed posts basically all following user post \r\nexport const getFeedPosts = createAsyncThunk(\r\n  'posts/getFeedPosts',\r\n  async (thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await postService.getFeedPosts(id,token);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Get post of  one user\r\n\r\n// export const getUserPosts = createAsyncThunk(\r\n//   'posts/getOnlyUserPosts',\r\n//   async (id, thunkAPI) => {\r\n//     try {\r\n//       const token = thunkAPI.getState().auth.user.token;\r\n//       return await postService.getUserPosts(id,token);\r\n//     } catch (error) {\r\n//       const message =\r\n//         (error.response &&\r\n//           error.response.data &&\r\n//           error.response.data.message) ||\r\n//         error.message ||\r\n//         error.toString();\r\n//       return thunkAPI.rejectWithValue(message);\r\n//     }\r\n//   }\r\n// );\r\n\r\n\r\n\r\n\r\n\r\n// Delete user post\r\nexport const deletePost = createAsyncThunk(\r\n  'post/delete',\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await postService.deletePost(id, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const postSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createPost.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(createPost.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts.push(action.payload);\r\n      })\r\n      .addCase(createPost.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(getFeedPosts.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getFeedPosts.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts = action.payload;\r\n      })\r\n      .addCase(getFeedPosts.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n\r\n\r\n\r\n      // .addCase(getUserPosts.pending, (state) => {\r\n      //   state.isLoading = true;\r\n      // })\r\n      // .addCase(getUserPosts.fulfilled, (state, action) => {\r\n      //   state.isLoading = false;\r\n      //   state.isSuccess = true;\r\n      //   state.posts = action.payload;\r\n      // })\r\n      // .addCase(getUserPosts.rejected, (state, action) => {\r\n      //   state.isLoading = false;\r\n      //   state.isError = true;\r\n      //   state.message = action.payload;\r\n      // })\r\n\r\n\r\n      \r\n      .addCase(deletePost.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(deletePost.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts = state.posts.filter(\r\n          (post) => post._id !== action.payload.id\r\n        );\r\n      })\r\n      .addCase(deletePost.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\nexport  const {reset}=postSlice.actions\r\nexport default postSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}