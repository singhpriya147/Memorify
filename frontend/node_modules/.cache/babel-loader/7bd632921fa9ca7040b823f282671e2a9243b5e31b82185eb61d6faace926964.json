{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\n// async thunk function -that deal with async data backend\n\n// Get user which contain basic user data and a token  from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n//register user\n\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  //make a request\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// get   a user\nexport const getUser = createAsyncThunk('auth/getUser', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    console.log(token);\n    return await authService.getUser(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n    // return message\n  }\n});\n\n// get all users available \n\nexport const getAllUsers = createAsyncThunk('auth/getAllPerson', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    console.log(token);\n    return await authService.getAllUser(token);\n    const res = await fetch(`http://localhost:5000/api/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const allUsers = await res.json();\n    console.log(allUsers.users);\n    setPersons(allUsers.users);\n  } catch (error) {\n    console.error(error);\n  }\n});\n\n// logut user\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n});\n\n// make slice\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // pending\n    .addCase(register.pending, state => {\n      state.isLoading = true;\n    })\n\n    // fulfilled\n    .addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    })\n\n    //rejected\n    .addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    })\n    // case for logut\n    .addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n    // case for getting user\n\n    //  .addCase(getUser.pending, (state) => {\n    //         state.isLoading = true;\n    //       })\n    //       .addCase(getUser.fulfilled, (state, action) => {\n    //         state.isLoading = false;\n    //         state.isSuccess = true;\n    //         state.user = action.payload;\n    //       })\n    //       .addCase(getUser.rejected, (state, action) => {\n    //         state.isLoading = false;\n    //         state.isError = true;\n    //         state.message = action.payload;\n    //         state.user = null;\n    //       })\n  }\n});\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","getUser","id","token","getState","auth","console","log","getAllUsers","_","getAllUser","res","fetch","headers","Authorization","allUsers","json","users","setPersons","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["D:/memories/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\n// async thunk function -that deal with async data backend\r\n\r\n// Get user which contain basic user data and a token  from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n//register user\r\n\r\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\r\n\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    //make a request\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response && error.response.data && error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\n// get   a user\r\nexport const getUser=createAsyncThunk('auth/getUser',async(id,thunkAPI)=>{\r\n  try {\r\n    const token = thunkAPI.getState().auth.user.token;\r\n    console.log(token);\r\n    return await authService.getUser(id, token);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n    // return message\r\n  }\r\n})\r\n\r\n// get all users available \r\n\r\n   export const getAllUsers = createAsyncThunk ('auth/getAllPerson',async(_,thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token;\r\n      console.log(token);\r\n      return await authService.getAllUser(token);\r\n\r\n      const res = await fetch(`http://localhost:5000/api/users`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      const allUsers = await res.json();\r\n\r\n      console.log(allUsers.users);\r\n      setPersons(allUsers.users);\r\n\r\n\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n\r\n\r\n\r\n// logut user\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  await authService.logout();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// make slice\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = '';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // pending\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      // fulfilled\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n\r\n      //rejected\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      // case for logut\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      })\r\n// case for getting user\r\n\r\n//  .addCase(getUser.pending, (state) => {\r\n//         state.isLoading = true;\r\n//       })\r\n//       .addCase(getUser.fulfilled, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isSuccess = true;\r\n//         state.user = action.payload;\r\n//       })\r\n//       .addCase(getUser.rejected, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isError = true;\r\n//         state.message = action.payload;\r\n//         state.user = null;\r\n//       })\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n});\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}