{"ast":null,"code":"import _regeneratorRuntime from\"D:/memories/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/memories/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from'axios';var API_URL='/api/users/';// This code defines a JavaScript function register that sends a POST request to an API endpoint /api/users/ using the axios library. The function takes an argument userData\n// (dispatch(register(userData))\n// which is an object containing the data that needs to be sent to the API. The function then makes an API call using the axios.post method, passing the API URL and the user data as arguments.\n// Once the API returns a response, the code checks if response.data is truthy and, if it is, it stores the data in the browser's local storage using the localStorage.setItem method. This allows the data to persist even if the user refreshes the page. Finally, the function returns the API response data.\n// Register user\nvar register=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(userData){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return axios.post(API_URL,userData);case 2:response=_context.sent;if(response.data){localStorage.setItem('user',JSON.stringify(response.data));}return _context.abrupt(\"return\",response.data);case 5:case\"end\":return _context.stop();}},_callee);}));return function register(_x){return _ref.apply(this,arguments);};}();// Login user\nvar login=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userData){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return axios.post(API_URL+'/login',userData);case 2:response=_context2.sent;if(response.data){localStorage.setItem('user',JSON.stringify(response.data));}return _context2.abrupt(\"return\",response.data);case 5:case\"end\":return _context2.stop();}},_callee2);}));return function login(_x2){return _ref2.apply(this,arguments);};}();var getUser=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(userId,token){var config,response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:config={headers:{Authorization:\"Bearer \".concat(token)}};// console.log(userId,token)\n_context3.next=3;return axios.get(API_URL+'/:'+\"\".concat(userId),config);case 3:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 5:case\"end\":return _context3.stop();}},_callee3);}));return function getUser(_x3,_x4){return _ref3.apply(this,arguments);};}();// const getAllUser = async ( token) => {\n//   const config = {\n//     headers: {\n//       Authorization: `Bearer ${token}`,\n//     },\n//   };\n//   // console.log(userId,token)\n//   const response = await axios.get(API_URL, config);\n//   // console.log(response.data);\n//   console.log('running all user function ');\n//   return response.data;\n// };\n// Logout user\nvar logout=function logout(){localStorage.removeItem('user');};var authService={register:register,logout:logout,login:login,getUser:getUser//  getAllUser,\n};export default authService;","map":{"version":3,"names":["axios","API_URL","register","userData","post","response","data","localStorage","setItem","JSON","stringify","login","getUser","userId","token","config","headers","Authorization","get","logout","removeItem","authService"],"sources":["D:/memories/frontend/src/features/auth/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/users/';\r\n\r\n// This code defines a JavaScript function register that sends a POST request to an API endpoint /api/users/ using the axios library. The function takes an argument userData\r\n// (dispatch(register(userData))\r\n// which is an object containing the data that needs to be sent to the API. The function then makes an API call using the axios.post method, passing the API URL and the user data as arguments.\r\n\r\n// Once the API returns a response, the code checks if response.data is truthy and, if it is, it stores the data in the browser's local storage using the localStorage.setItem method. This allows the data to persist even if the user refreshes the page. Finally, the function returns the API response data.\r\n\r\n// Register user\r\nconst register = async (userData) => {\r\n  const response = await axios.post(API_URL, userData);\r\n\r\n  if (response.data) {\r\n    localStorage.setItem('user', JSON.stringify(response.data));\r\n  }\r\n\r\n  return response.data;\r\n};\r\n\r\n// Login user\r\nconst login = async (userData) => {\r\n  const response = await axios.post(API_URL + '/login', userData);\r\n\r\n  if (response.data) {\r\n    localStorage.setItem('user', JSON.stringify(response.data));\r\n  }\r\n\r\n  return response.data;\r\n};\r\n\r\n\r\nconst getUser=async(userId,token)=>{\r\n  const config={\r\n    headers:{\r\n      Authorization:`Bearer ${token}`,\r\n    },\r\n  };\r\n  // console.log(userId,token)\r\n  const response = await axios.get(API_URL + '/:' + `${userId}`, config);\r\n  // console.log(response.data);\r\n  //     console.log('hello');\r\n\r\n  return response.data;\r\n\r\n}\r\n\r\n\r\n// const getAllUser = async ( token) => {\r\n//   const config = {\r\n//     headers: {\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   };\r\n//   // console.log(userId,token)\r\n//   const response = await axios.get(API_URL, config);\r\n//   // console.log(response.data);\r\n//   console.log('running all user function ');\r\n\r\n  \r\n//   return response.data;\r\n// };\r\n\r\n\r\n// Logout user\r\nconst logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\nconst authService = {\r\n  register,\r\n  logout,\r\n  login,\r\n getUser,\r\n//  getAllUser,\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"oOAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB,GAAMC,QAAO,CAAG,aAAa,CAE7B;AACA;AACA;AAEA;AAEA;AACA,GAAMC,SAAQ,4FAAG,iBAAOC,QAAQ,sJACPH,MAAK,CAACI,IAAI,CAACH,OAAO,CAAEE,QAAQ,CAAC,QAA9CE,QAAQ,eAEd,GAAIA,QAAQ,CAACC,IAAI,CAAE,CACjBC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC7D,CAAC,gCAEMD,QAAQ,CAACC,IAAI,uDACrB,kBARKJ,SAAQ,4CAQb,CAED;AACA,GAAMS,MAAK,6FAAG,kBAAOR,QAAQ,2JACJH,MAAK,CAACI,IAAI,CAACH,OAAO,CAAG,QAAQ,CAAEE,QAAQ,CAAC,QAAzDE,QAAQ,gBAEd,GAAIA,QAAQ,CAACC,IAAI,CAAE,CACjBC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC7D,CAAC,iCAEMD,QAAQ,CAACC,IAAI,yDACrB,kBARKK,MAAK,8CAQV,CAGD,GAAMC,QAAO,6FAAC,kBAAMC,MAAM,CAACC,KAAK,2IACxBC,MAAM,CAAC,CACXC,OAAO,CAAC,CACNC,aAAa,kBAAWH,KAAK,CAC/B,CACF,CAAC,CACD;AAAA,uBACuBd,MAAK,CAACkB,GAAG,CAACjB,OAAO,CAAG,IAAI,WAAMY,MAAM,CAAE,CAAEE,MAAM,CAAC,QAAhEV,QAAQ,iDAIPA,QAAQ,CAACC,IAAI,yDAErB,kBAbKM,QAAO,kDAaZ,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA,GAAMO,OAAM,CAAG,QAATA,OAAM,EAAS,CACnBZ,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAED,GAAMC,YAAW,CAAG,CAClBnB,QAAQ,CAARA,QAAQ,CACRiB,MAAM,CAANA,MAAM,CACNR,KAAK,CAALA,KAAK,CACNC,OAAO,CAAPA,OACD;AACA,CAAC,CAED,cAAeS,YAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}