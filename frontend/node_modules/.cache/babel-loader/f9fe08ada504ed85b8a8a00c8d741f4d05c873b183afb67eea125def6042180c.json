{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\n// async thunk function -that deal with async data backend\n\n// Get user which contain basic user data and a token  from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n//register user\n\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  //make a request\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// get   a user\nexport const getUser = createAsyncThunk('auth/getUser', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    console.log(token);\n    return await authService.getUser(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n    // return message\n  }\n});\n\n// get all users available \n\n//  export const getAllPerson = createAsyncThunk ('auth/getAllPerson',async(_,thunkAPI) => {\n//   try {\n//     const token = thunkAPI.getState().auth.user.token;\n//     console.log(token);\n//     return await authService.getAllUser(token);\n//   } catch (error) {\n\n//    const message =\n//      (error.response && error.response.data && error.response.data.message) ||\n//      error.message ||\n//      error.toString();\n//    return thunkAPI.rejectWithValue(message);\n//   }\n// });\n\nexport const updateProfile = createAsyncThunk('auth/updateProfile', async (_ref, thunkAPI) => {\n  let {\n    name,\n    email\n  } = _ref;\n  //make a request\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    const response = await fetch(`http://localhost:5000/api/users/update/profile`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n    // console.log(\" error in updating the profile \",error);\n  }\n});\n\n// logut user\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n});\n\n// make slice\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // pending\n    .addCase(register.pending, state => {\n      state.isLoading = true;\n    })\n\n    // fulfilled\n    .addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    })\n\n    //rejected\n    .addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    })\n    // case for logut\n    .addCase(logout.fulfilled, state => {\n      state.user = null;\n    })\n    // case for getting user\n    .addCase(getUSer.pending, state => {\n      state.isLoading = true;\n    }).addCase(getAllPerson.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(getAllPerson.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n\n    // pending\n    .addCase(updateProfile.pending, state => {\n      state.isLoading = true;\n    })\n\n    // fulfilled\n    .addCase(updateProfile.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user.name = action.payload.name;\n      state.user.email = action.payload.email;\n    })\n\n    //rejected\n    .addCase(updateProfile.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      // state.user = null;\n    });\n  }\n});\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","getUser","id","token","getState","auth","console","log","updateProfile","name","email","fetch","method","headers","Authorization","body","stringify","json","logout","authSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","getUSer","getAllPerson","actions","reducer"],"sources":["D:/memories/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\n// async thunk function -that deal with async data backend\r\n\r\n// Get user which contain basic user data and a token  from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n//register user\r\n\r\n// 'auth/register' is action user is passed in from register component  and dispatch register form there\r\n\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    //make a request\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response && error.response.data && error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\n// get   a user\r\nexport const getUser=createAsyncThunk('auth/getUser',async(id,thunkAPI)=>{\r\n  try {\r\n    const token = thunkAPI.getState().auth.user.token;\r\n    console.log(token);\r\n    return await authService.getUser(id, token);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n    // return message\r\n  }\r\n})\r\n\r\n// get all users available \r\n\r\n  //  export const getAllPerson = createAsyncThunk ('auth/getAllPerson',async(_,thunkAPI) => {\r\n  //   try {\r\n  //     const token = thunkAPI.getState().auth.user.token;\r\n  //     console.log(token);\r\n  //     return await authService.getAllUser(token);\r\n  //   } catch (error) {\r\n\r\n  //    const message =\r\n  //      (error.response && error.response.data && error.response.data.message) ||\r\n  //      error.message ||\r\n  //      error.toString();\r\n  //    return thunkAPI.rejectWithValue(message);\r\n  //   }\r\n  // });\r\n\r\n\r\n\r\nexport const updateProfile = createAsyncThunk(\r\n  'auth/updateProfile',\r\n  async ({name,email},thunkAPI) => {\r\n    //make a request\r\n    try {\r\n      const token=thunkAPI.getState().auth.user.token;\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/users/update/profile`,\r\n        {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ name: name, email: email }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      return data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n      // console.log(\" error in updating the profile \",error);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// logut user\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  await authService.logout();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// make slice\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = '';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // pending\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      // fulfilled\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n\r\n      //rejected\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      // case for logut\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      })\r\n      // case for getting user\r\n\r\n      .addCase(getUSer.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getAllPerson.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(getAllPerson.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        \r\n      })\r\n\r\n      // pending\r\n      \r\n\r\n\r\n      .addCase(updateProfile.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n\r\n      // fulfilled\r\n      .addCase(updateProfile.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user.name = action.payload.name;\r\n        state.user.email = action.payload.email;\r\n      })\r\n\r\n      //rejected\r\n      .addCase(updateProfile.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        // state.user = null;\r\n      });\r\n\r\n\r\n\r\n  },\r\n});\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}