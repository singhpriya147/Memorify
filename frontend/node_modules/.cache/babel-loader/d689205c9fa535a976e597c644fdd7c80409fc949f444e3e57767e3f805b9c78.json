{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport postService from './postService';\nconst initialState = {\n  posts: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// create new goal\n\nexport const createPost = createAsyncThunk('posts/create', async postData => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await postService.createGoal(postData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts.push(action.payload);\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getPosts.pending, state => {\n      state.isLoading = true;\n    }).addCase(getPosts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts = action.payload;\n    }).addCase(getPosts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(deletePost.pending, state => {\n      state.isLoading = true;\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.posts = state.goals.filter(goal => goal._id !== action.payload.id);\n    }).addCase(deleteGoal.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postService","initialState","posts","isError","isSuccess","isLoading","message","createPost","postData","token","thunkAPI","getState","auth","user","createGoal","error","response","data","toString","rejectWithValue","postSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","getPosts","deletePost","goals","filter","goal","_id","id","deleteGoal","actions","reducer"],"sources":["C:/Users/ASUS/Desktop/memories/frontend/src/features/Posts/postSlice.js"],"sourcesContent":["import {createSlice ,createAsyncThunk} from '@reduxjs/toolkit'\r\nimport postService from './postService'\r\nconst initialState={\r\n posts:[],\r\n isError:false,\r\n isSuccess:false,\r\n isLoading:false,\r\n message:'',\r\n}\r\n\r\n// create new goal\r\n \r\nexport const createPost=createAsyncThunk('posts/create',async(postData)=>{\r\n\r\n try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await postService.createGoal(postData, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n        }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const postSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createPost.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(createPost.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts.push(action.payload);\r\n      })\r\n      .addCase(createPost.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(getPosts.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getPosts.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts = action.payload;\r\n      })\r\n      .addCase(getPosts.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(deletePost.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(deletePost.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.posts = state.goals.filter(\r\n          (goal) => goal._id !== action.payload.id\r\n        );\r\n      })\r\n      .addCase(deleteGoal.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\nexport  const {reset}=postSlice.actions\r\nexport default postSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}